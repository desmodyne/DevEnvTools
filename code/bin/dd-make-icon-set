#!/usr/bin/env bash

# dd-make-icon-set
#
# generate a set of icons from one (large) source image
#
# author  : stefan schablowski
# contact : sschablowski@gmail.com
# created : 2017-05-01


# http://stackoverflow.com/a/39678276
# https://apple.stackexchange.com/a/78988


# NOTE: svg source images require ImageMagick with rsvg:
#   brew uninstall --force imagemagick
#   brew install imagemagick --with-librsvg
# see also http://stackoverflow.com/a/27524633

# NOTE: free sample "Terminal" svg images available at e.g.
# https://www.iconfinder.com/search/?q=terminal&type=vector&price=free


# -----------------------------------------------------------------------------
# define functions

# http://stackoverflow.com/a/6212408

function usage
{
    read -r -d '' msg_tmpl <<'EOT'
Usage: %s <source image> [target folder]

mandatory arguments:
  source image          path and name of source image file to create icons from;
                        best results are achieved using a .svg vector
                        or a 1024x1024 pixel / 144 dpi .png raster image

optional arguments:
  -?, --help            print this help message
  target folder         path to target folder where icons will be created;
                        if omitted, the folder will be created next to the
                        source using its filename without suffix as name;
                        an existing folder will be re-used if it is empty
EOT

    # shellcheck disable=SC2059
    printf "${msg_tmpl}\n" "${script_name}"
}


# -----------------------------------------------------------------------------
# process command line arguments

# name of this script: http://stackoverflow.com/q/192319
script_name="$(basename "$0")"

if [ $# -ne 1 ] && [ $# -ne 2 ]
then
    usage
    exit 1
fi

# http://stackoverflow.com/a/14203146
while [ $# -gt 0 ]
do
    key="$1"

    case "${key}" in
      # NOTE: must escape -?, seems to act as wildcard otherwise
      -\?|--help) usage; exit 1 ;;

      *)  if [ -z "${source}" ]
          then
              source="$1"
          else
              if [ -z "${target}" ]
              then
                  target="$1"
              else
                  usage
                  exit 1
              fi
          fi
    esac

    # move past argument or value
    shift
done


# source is a mandatory command line argument
if [ -z "${source}" ]
then
    usage
    exit 1
fi


# -----------------------------------------------------------------------------
# configure script parameters

# command executable to convert images
cmd_exec='convert'

# command arguments template
# NOTE: source and target filenames are added separately
# to work around issues with spaces in path or filenames;
# see https://github.com/koalaman/shellcheck/wiki/SC2089
# ImageMagick arguments: http://stackoverflow.com/q/9853325
cmd_args_tmpl='-density %s -size %s'

# filename:size:density
read -r -d '' image_spec_list <<'EOT'
icon_16x16.png:16x16:72
icon_16x16@2x.png:32x32:144
icon_32x32.png:32x32:72
icon_32x32@2x.png:64x64:144
icon_128x128.png:128x128:72
icon_128x128@2x.png:256x256:144
icon_256x256.png:256x256:72
icon_256x256@2x.png:512x512:144
icon_512x512.png:512x512:72
icon_512x512@2x.png:1024x1024:144
EOT


# -----------------------------------------------------------------------------
# prepare output folder

# http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_07_01.html

if [ -z "${target}" ]
then
    # http://stackoverflow.com/a/4563848
    target="${source%.*}"
fi

if [ -e "${target}" ]
then
    if [ -d "${target}" ]
    then
        # http://stackoverflow.com/a/17902999
        if [ -n "$(ls -A "${target}")" ]
        then
            echo "directory ${target} exists and is not empty"
            exit -1
        fi
    fi
else
    mkdir -p "${target}"
fi


# -----------------------------------------------------------------------------
# generate icon set

for image_spec in ${image_spec_list}
do
    filename="$(echo "${image_spec}" | cut -d : -f 1)"
    size="$(    echo "${image_spec}" | cut -d : -f 2)"
    density="$( echo "${image_spec}" | cut -d : -f 3)"

    # need to add -- to prevent printf interpreting convert arguments
    # shellcheck disable=SC2059
    cmd_args="$(printf -- "${cmd_args_tmpl}" "${density}" "${size}")"

    echo "${cmd_exec} ${cmd_args} ${source} ${target}/${filename}"

    # shellcheck disable=SC2086
    if ! "${cmd_exec}" ${cmd_args} "${source}" "${target}/${filename}"
    then
        exit -1
    fi
done
