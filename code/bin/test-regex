#!/usr/bin/env bash

# test-regex
#
# unit test script for regex to parse ssh connection string
#
# author  : stefan schablowski
# contact : stefan.schablowski@desmodyne.com
# created : 2017-05-17


# ssh connection string: [username[:password]@]hostname[:port][/folder]


# TODO: see http://stackoverflow.com/q/1339416 for more unit test attempts
# TODO: without a third parameter, 'assert_eq' simply prints nothing
# TODO: using 'hostname' as test string collides with hostname command
# TODO: considering we're already using a test framework, this code is awful


# https://github.com/torokmark/assert.sh
source ../../ext/bin/assert.sh


regex='\(\)\(\)\([a-z]+\)\(\)\(\)'


# TODO: associative array, but integer indexes ?
declare -A test_names

test_names[1]='username'
test_names[2]='password'
test_names[3]='hostname'
test_names[4]='port'
test_names[5]='folder'

msg_tmpl='test failed: %s - expected result: %s, actual result: %s'


test_str='my_host'

result="$(echo "${test_str}" | sed -e "s|${regex}|\1|g")"
exp_res=''
test_name="${test_str} 1"
assert_eq "${result}" "${exp_res}" "$(printf "${msg_tmpl}" "${test_name}" "${exp_res}" "${result}")"

result="$(echo "${test_str}" | sed -e "s|${regex}|\2|g")"
exp_res=''
test_name="${test_str} 2"
assert_eq "${result}" "${exp_res}" "$(printf "${msg_tmpl}" "${test_name}" "${exp_res}" "${result}")"

result="$(echo "${test_str}" | sed -e "s|${regex}|\3|g")"
exp_res='my_host'
test_name="${test_str} 3"
assert_eq "${result}" "${exp_res}" "$(printf "${msg_tmpl}" "${test_name}" "${exp_res}" "${result}")"

result="$(echo "${test_str}" | sed -e "s|${regex}|\4|g")"
exp_res=''
test_name="${test_str} 4"
assert_eq "${result}" "${exp_res}" "$(printf "${msg_tmpl}" "${test_name}" "${exp_res}" "${result}")"

result="$(echo "${test_str}" | sed -e "s|${regex}|\5|g")"
exp_res=''
test_name="${test_str} 5"
assert_eq "${result}" "${exp_res}" "$(printf "${msg_tmpl}" "${test_name}" "${exp_res}" "${result}")"


test_str='my_user@my_host'

result="$(echo "${test_str}" | sed -e "s|${regex}|\1|g")"
exp_res='my_user'
test_name="${test_str} 1"
assert_eq "${result}" "${exp_res}" "$(printf "${msg_tmpl}" "${test_name}" "${exp_res}" "${result}")"

result="$(echo "${test_str}" | sed -e "s|${regex}|\2|g")"
exp_res=''
test_name="${test_str} 2"
assert_eq "${result}" "${exp_res}" "$(printf "${msg_tmpl}" "${test_name}" "${exp_res}" "${result}")"

result="$(echo "${test_str}" | sed -e "s|${regex}|\3|g")"
exp_res='my_host'
test_name="${test_str} 3"
assert_eq "${result}" "${exp_res}" "$(printf "${msg_tmpl}" "${test_name}" "${exp_res}" "${result}")"

result="$(echo "${test_str}" | sed -e "s|${regex}|\4|g")"
exp_res=''
test_name="${test_str} 4"
assert_eq "${result}" "${exp_res}" "$(printf "${msg_tmpl}" "${test_name}" "${exp_res}" "${result}")"

result="$(echo "${test_str}" | sed -e "s|${regex}|\5|g")"
exp_res=''
test_name="${test_str} 5"
assert_eq "${result}" "${exp_res}" "$(printf "${msg_tmpl}" "${test_name}" "${exp_res}" "${result}")"


test_str='my_user:my_pass@my_host'

result="$(echo "${test_str}" | sed -e "s|${regex}|\1|g")"
exp_res='my_user'
test_name="${test_str} 1"
assert_eq "${result}" "${exp_res}" "$(printf "${msg_tmpl}" "${test_name}" "${exp_res}" "${result}")"

result="$(echo "${test_str}" | sed -e "s|${regex}|\2|g")"
exp_res='my_pass'
test_name="${test_str} 2"
assert_eq "${result}" "${exp_res}" "$(printf "${msg_tmpl}" "${test_name}" "${exp_res}" "${result}")"

result="$(echo "${test_str}" | sed -e "s|${regex}|\3|g")"
exp_res='my_host'
test_name="${test_str} 3"
assert_eq "${result}" "${exp_res}" "$(printf "${msg_tmpl}" "${test_name}" "${exp_res}" "${result}")"

result="$(echo "${test_str}" | sed -e "s|${regex}|\4|g")"
exp_res=''
test_name="${test_str} 4"
assert_eq "${result}" "${exp_res}" "$(printf "${msg_tmpl}" "${test_name}" "${exp_res}" "${result}")"

result="$(echo "${test_str}" | sed -e "s|${regex}|\5|g")"
exp_res=''
test_name="${test_str} 5"
assert_eq "${result}" "${exp_res}" "$(printf "${msg_tmpl}" "${test_name}" "${exp_res}" "${result}")"


test_str='my_user:my_pass@my_host:my_port'

result="$(echo "${test_str}" | sed -e "s|${regex}|\1|g")"
exp_res='my_user'
test_name="${test_str} 1"
assert_eq "${result}" "${exp_res}" "$(printf "${msg_tmpl}" "${test_name}" "${exp_res}" "${result}")"

result="$(echo "${test_str}" | sed -e "s|${regex}|\2|g")"
exp_res='my_pass'
test_name="${test_str} 2"
assert_eq "${result}" "${exp_res}" "$(printf "${msg_tmpl}" "${test_name}" "${exp_res}" "${result}")"

result="$(echo "${test_str}" | sed -e "s|${regex}|\3|g")"
exp_res='my_host'
test_name="${test_str} 3"
assert_eq "${result}" "${exp_res}" "$(printf "${msg_tmpl}" "${test_name}" "${exp_res}" "${result}")"

result="$(echo "${test_str}" | sed -e "s|${regex}|\4|g")"
exp_res='my_port'
test_name="${test_str} 4"
assert_eq "${result}" "${exp_res}" "$(printf "${msg_tmpl}" "${test_name}" "${exp_res}" "${result}")"

result="$(echo "${test_str}" | sed -e "s|${regex}|\5|g")"
exp_res=''
test_name="${test_str} 5"
assert_eq "${result}" "${exp_res}" "$(printf "${msg_tmpl}" "${test_name}" "${exp_res}" "${result}")"


test_str='my_user:my_pass@my_host:my_port/my_folder'

result="$(echo "${test_str}" | sed -e "s|${regex}|\1|g")"
exp_res='my_user'
test_name="${test_str} 1"
assert_eq "${result}" "${exp_res}" "$(printf "${msg_tmpl}" "${test_name}" "${exp_res}" "${result}")"

result="$(echo "${test_str}" | sed -e "s|${regex}|\2|g")"
exp_res='my_pass'
test_name="${test_str} 2"
assert_eq "${result}" "${exp_res}" "$(printf "${msg_tmpl}" "${test_name}" "${exp_res}" "${result}")"

result="$(echo "${test_str}" | sed -e "s|${regex}|\3|g")"
exp_res='my_host'
test_name="${test_str} 3"
assert_eq "${result}" "${exp_res}" "$(printf "${msg_tmpl}" "${test_name}" "${exp_res}" "${result}")"

result="$(echo "${test_str}" | sed -e "s|${regex}|\4|g")"
exp_res='my_port'
test_name="${test_str} 4"
assert_eq "${result}" "${exp_res}" "$(printf "${msg_tmpl}" "${test_name}" "${exp_res}" "${result}")"

result="$(echo "${test_str}" | sed -e "s|${regex}|\5|g")"
exp_res='my_folder'
test_name="${test_str} 5"
assert_eq "${result}" "${exp_res}" "$(printf "${msg_tmpl}" "${test_name}" "${exp_res}" "${result}")"
